utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
library(reticulate)
py_run_file("C:/Users/bencros/Downloads/Untitled.ipynb")
py_run_file("C:/Users/bencros/Downloads/Untitled.py")
moviepy.editor <- import("movie.editor")
moviepy.editor <- import("moviepy.editor")
moviepy.editor <- import("moviepy.editor")
suppressWarnings(
suppressPackageStartupMessages({
library(stringr)
library(purrr)
library(tidyr)
library(data.table)
library(httr)
library(jsonlite)     # For fromJSON function
library(dplyr)
library(lubridate)
})
)
library(httr)
url <- "https://tiktok82.p.rapidapi.com/getChallengeVideos"
queryString <- list(
hashtag = "fyp",
cursor = "50"
)
response <- VERB("GET",
url,
add_headers('X-RapidAPI-Key' = 'ee9f9a0a74mshdf11304da3f9e15p15be10jsna76036e001f3',
'X-RapidAPI-Host' = 'tiktok82.p.rapidapi.com'),
query = queryString,
content_type("application/octet-stream"))
content(response, "text")
data <- content(response, "text")
library(jsonlite)
fromJSON(data)
fromJSON(data$item_list)
data$data$item_list
data[item_list]
str(data)
dat <- fromJSON(data)
data <- fromJSON(data)
data <- data$data$item_list
colnames(data)
head(data)
head(unnest(data))
library(tidyr)
head(unnest(data))
colnames(unnest(data))
colnames(unnest(data), cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem))
colnames(unnest(data, cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem))
colnames(unnest(data, cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem)))
colnames(unnest(data, cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem)))
unnest(data, cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem))
unnest(data, cols = c(video, author, music, challenges, stats, duetInfo, textExtra, authorStats, warnInfo, effectStickers, stickersOnItem), keep_empty = TRUE)
unnest(data, cols = c(video), keep_empty = TRUE)
unnest(data, cols = c(video), keep_empty = TRUE, names_sep = ".")
data <- unnest(data, cols = c(video, author, stats), keep_empty = TRUE, names_sep = ".")
data <- content(response, "text")
data <- fromJSON(data)
data <- data$data$item_list
df <- unnest(data, cols = c(video, author, stats), keep_empty = TRUE, names_sep = ".")
df
df$video.downloadAddr[1]
vid <- tedf$video.downloadAddr[1]
vid <- df$video.downloadAddr[1]
url <- "https://tiktok82.p.rapidapi.com/getDownloadVideoWithWatermark"
queryString <- list(video_url = "https://v16-webapp-prime.us.tiktok.com/video/tos/useast5/tos-useast5-pve-0068-tx/6855e7222fb74ba5954ed7f8de3445ad/?a=1988&ch=0&cr=0&dr=0&lr=tiktok_m&cd=0%7C0%7C1%7C0&cv=1&br=3476&bt=1738&cs=0&ds=3&ft=_rKBMBnZq8Zmo4daTc_vjIIdsAhLrus&mime_type=video_mp4&qs=0&rc=ZjZoNmU5ZjVoNWlmZGc1M0BpM2VvO2Q6Zjk0ZzMzZzgzNEAwLS1iY2AxNmExLy0vYS81YSNwXjU1cjRnbjFgLS1kLy9zcw%3D%3D&expire=1681307363&l=2023041207485417C38850CEBEA500985D&ply_type=2&policy=2&signature=c358ffd2727693de6cb2a224a894392f&tk=tt_chain_token")
response <- VERB("GET", url, add_headers('X-RapidAPI-Key' = 'ee9f9a0a74mshdf11304da3f9e15p15be10jsna76036e001f3', 'X-RapidAPI-Host' = 'tiktok82.p.rapidapi.com'), query = queryString, content_type("application/octet-stream"))
content(response, "text")
colnames(df)
df$video.playAddr
df$video.playAddr[1]
df$video.playAddr[2]
data
author <- df$author.uniqueId
author <- df$author.uniqueId[1]
vid <- df$video.id
paste0("https://tiktok.com/@", author, vid)
author <- df$author.uniqueId
vid <- df$video.id
paste0("https://tiktok.com/@", author, vid)
paste0("https://tiktok.com/@", author, "/video/", vid)
download.file("https://v16m-default.akamaized.net/bc9533100084dee83be187b558624d3b/6436be34/video/tos/maliva/tos-maliva-ve-0068c799-us/f3fa0ee5a95c4a43939703a920a36e1f/?a=0&ch=0&cr=0&dr=0&lr=all&cd=0%7C0%7C0%7C0&cv=1&br=3334&bt=1667&cs=0&ds=3&ft=iJOG.y7oZZv0PD1i-I6Xg9wMy2j5kEeC~&mime_type=video_mp4&qs=0&rc=Zzk3OzpoNDczNmQ8Ozc4Z0BpM2VvO2Q6Zjk0ZzMzZzgzNEAxYi0yL18wX2MxLjVfMF9fYSNwXjU1cjRnbjFgLS1kLy9zcw%3D%3D&l=20230412082005D9D39EF4E4599C3759A8&btag=80000",
"test.mp4")
download.file("https://v16m-default.akamaized.net/bc9533100084dee83be187b558624d3b/6436be34/video/tos/maliva/tos-maliva-ve-0068c799-us/f3fa0ee5a95c4a43939703a920a36e1f/?a=0&ch=0&cr=0&dr=0&lr=all&cd=0%7C0%7C0%7C0&cv=1&br=3334&bt=1667&cs=0&ds=3&ft=iJOG.y7oZZv0PD1i-I6Xg9wMy2j5kEeC~&mime_type=video_mp4&qs=0&rc=Zzk3OzpoNDczNmQ8Ozc4Z0BpM2VvO2Q6Zjk0ZzMzZzgzNEAxYi0yL18wX2MxLjVfMF9fYSNwXjU1cjRnbjFgLS1kLy9zcw%3D%3D&l=20230412082005D9D39EF4E4599C3759A8&btag=80000",
"test.mp4")
download.file(df$video.downloadAddr[1],
"test.mp4")
download.file(df$video.downloadAddr[2],
"test.mp4")
download.file(df$video.downloadAddr[4],
"test.mp4")
data
paste0("https://tiktok.com/@", author, "/video/", vid)
# Course Notes - https://uomresearchit.github.io/r-tidyverse-intro/setup/
# Google Docs - https://docs.google.com/document/d/1nFisfUKHSrZeAkEKCVKBEhnhduB_cNzoZ65VBsGYqPQ/edit
setwd("C:/Users/bencros/Documents/GitHub/ManUniRCourse/")
#--------------------DAY 1--------------------#
#----------INTRODUCTION TO R AND RSTUDIO----------#
#----MATHEMATICAL FUNCTIONS----# ####
sin(1) # Trigonometry
log(1) # Logarithms
log(10) # Base-10 logarithm
exp(0.5) # Exponential function
#----COMPARISONS----# ####
1 == 1 # Equality
1 != 2 # Inequality
1 < 2 # Less than
1 <= 1 # Less than or equal to
1 >0 # Greater than
1 >= -9 # Greater than or equal to
#----VARIABLES----# ####
# Can create variable using <-
x <- 1/40
x
# Perform calculations on it
log(x)
# Change the value number
x <- 100
x
# Add variable to itself
x <- x + 1
x
# Can also assign characters
sentence <- "The cat sat on the mat"
# Ends in an error
sentence + 1
#----DPLYR PACKAGE----# ####
# Select()
year_country_gdp <- select(gapminder, year, country,
gdpPercap)
#----LOAD DATA----# ####
library(tidyverse)
# Read gapminder data
gapminder <- read_csv("data/gapminder-FiveYearData.csv")
#----DPLYR PACKAGE----# ####
# Select()
year_country_gdp <- select(gapminder, year, country,
gdpPercap)
# Filter()
gapminder_europe <- filter(gapminder,
continent == "Europe")
# Pipe Operator
gapminder_ar <- gapminder %>%
filter(continent == "Europe") %>%
select(year, country, gdpPercap)
#----LOAD DATA----# ####
library(tidyverse)
# Read gapminder data
gapminder <- read_csv("data/gapminder-FiveYearData.csv")
#----DPLYR PACKAGE----# ####
# Select()
year_country_gdp <- select(gapminder, year, country,
gdpPercap)
# Filter()
gapminder_europe <- filter(gapminder,
continent == "Europe")
# Pipe Operator
gapminder_ar <- gapminder %>%
filter(continent == "Europe") %>%
select(year, country, gdpPercap)
# Using in
gapminder %>%
filter(country %in% c("Denmark", "Norway", "Sweden"))
# arrange()
gapminder %>%
filter(continent == "Europe", year == 2007) %>%
arrange(pop)
# arrange()
gapminder %>%
filter(continent == "Europe", year == 2007) %>%
arrange(desc(pop))
# mutate()
gapminder %>%
mutate(gdp = gdp * pop)
# mutate()
gapminder %>%
mutate(gdp = gdpPercap * pop)
# mutate()
gapminder_gdp <- gapminder %>%
mutate(gdp = gdpPercap * pop)
gapminder_log <- gapminder %>%
mutate(logGdpPerCap = log(gdpPercap))
gapminder_log
# group_by()
gapminder %>%
filter(year == 2007) %>%
summarise(meanlife = mean(lifeExp))
# summarize()
gapminder_le <- gapminder %>%
filter(year == 2007) %>%
summarise(meanlife = mean(lifeExp))
# group_by()
gapminder %>%
filter(year == 2007) %>%
summarize(meanlife = mean(lifeExp))
# group_by()
gapminder %>%
filter(year == 2007) %>%
summarise(meanlife = mean(lifeExp))
# group_by()
gapminder %>%
filter(year == 2007) %>%
group_by(country) %>%
summarise(meanlife = mean(lifeExp))
# group_by()
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(meanlife = mean(lifeExp))
# group_by()
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(meanlife = mean(lifeExp)) %>%
arrange(desc(meanlife))
# group_by()
gapminder_by_le <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarise(meanlife = mean(lifeExp)) %>%
arrange(desc(meanlife))
# n()
gapminder %>%
filter(year == 2002) %>%
group_by(continent) %>%
summarise(se_pop = sd(pop)/sqrt(n()))
# n()
gapminder %>%
filter(year == 2002) %>%
group_by(continent) %>%
summarise(se_pop = sd(pop)/sqrt(n())) %>%
arrange(desc(se_pop))
# n()
gapminder %>%
filter(year == 2002) %>%
group_by(continent) %>%
summarise(n.obs = n())
gapminder %>%
filter(year == 2002) %>%
count(continent, sort = TRUE)
# ifelse
gapminder %>%
mutate(gdp = gdpPercap * pop)
mutate(gdp = ifelse(lifeExp > 50, gdpPercap * pop, NA)
# ifelse
gapminder %>%
# ifelse
gapminder %>%
mutate(gdp = ifelse(lifeExp > 50, gdpPercap * pop, NA))
gapminder %>%
filter(continent == "Africa") %>%
select(lifeExp, country, year)
gapminder %>%
filter(continent == "Africa") %>%
select(lifeExp, country, year) %>%
nrow()
gap_af <- gapminder %>%
filter(continent == "Africa") %>%
select(lifeExp, country, year)
nrow(gap_af)
gapminder %>%
filter(continent == "Europe" & year == 2007)
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank(lifeExp))
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(lifeExp))
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(lifeExp)) %>%
arrange(rank)
mutate(rank = desc(rank(lifeExp())
mutate(rank = desc(rank(lifeExp()))
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = desc(rank(lifeExp)
mutate(rank = desc(rank(lifeExp))
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = desc(rank(lifeExp)))
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(desc(lifeExp)))
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(desc(lifeExp))) %>%
arrange(rank)
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(lifeExp)) %>%
arrange(rank)
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(desc(lifeExp))) %>%
arrange(rank)
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(lifeExp)) %>%
arrange(rank)
gapminder %>%
filter(continent == "Europe" & year == 2007) %>%
mutate(rank = rank(desc(lifeExp))) %>%
arrange(rank)
gapminder %>%
group_by(continent, year) %>%
summarise(avg_life_exp = mean(lifeExp))
#-----5 - CREATING PUBLICATION-QUALITY GRAPHICS-----#
#----GGPLOT2----# ####
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
#-----5 - CREATING PUBLICATION-QUALITY GRAPHICS-----#
#----GGPLOT2----# ####
gapminder <- read_csv("data/gapminder-FiveYearData.csv")
#-----5 - CREATING PUBLICATION-QUALITY GRAPHICS-----#
#----GGPLOT2----# ####
gapminder <- read_csv("data/gapminder-FiveYearData.csv")
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point()
#----COMBINING DPLYR AND GGPLOT2----# ####
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point()
ggplot(data = gapminder, aes(x = Year, y = lifeExp)) +
geom_point()
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
geom_point()
ggplot(data = gapminder, aes(x = year, y = lifeExp, colour = continent)) +
geom_point()
ggplot(data = gapminder, aes(x = year, y = lifeExp)) +
geom_point(aes(colour = continent))
gapminder %>%
ggplot(aes(x = year, y = gdpPercap)) +
geom_point()
gapminder %>%
ggplot(aes(x = year, y = gdpPercap, colour = continent)) +
geom_point()
gapminder %>%
ggplot(aes(x = year, y = gdpPercap, colour = continent)) +
geom_point() +
facet_wrap(~continent)
gapminder %>%
ggplot(aes(x = year, y = gdpPercap, colour = continent)) +
geom_point() +
facet_wrap(~continent, ncol = 1)
gapminder %>%
group_by(continent, year) %>%
summarise(avg_gdp = mean(gdpPercap)) %>%
ggplot(aes(x = year, y = avg_gdp)) +
geom_line()
gapminder %>%
group_by(continent, year) %>%
summarise(avg_gdp = mean(gdpPercap)) %>%
ggplot(aes(x = year, y = avg_gdp, colour = continent)) +
geom_line()
gapminder %>%
ggplot(aes(x = year, y = gdpPercap, colour = continent)) +
geom_line()
gapminder %>%
ggplot(aes(x = year,
y = gdpPercap,
colour = continent,
group = country)) +
geom_line()
gapminder %>%
ggplot(aes(x = year, y = gdpPercap,
colour = continent, group = country)) +
geom_line() +
facet_wrap(~continent, ncol = 1)
gapminder %>%
ggplot(aes(x = year, y = gdpPercap,
colour = continent, group = country)) +
geom_line() +
facet_wrap(~continent, ncol = 1,
scales = 'free')
gapminder %>%
group_by(continent, year) %>%
summarise(avg_gdp = mean(gdpPercap)) %>%
ggplot(aes(x = year, y = avg_gdp, colour = continent)) +
geom_line()
gapminder %>%
ggplot(aes(x = year, y = log(gdpPercap),
colour = continent, group = country)) +
geom_line() +
facet_wrap(~continent, ncol = 1, scales = 'free')
ggsave("plots/myplot.png")
#----PREPARE DATA----#
gapminder_uk <- gapminder%>%
filter(country == "United Kingdom")
#----PLOT----# ####
gapminder_uk %>%
ggplot(aes(y = gdpPercap, x = year)) +
geom_point()
#----LINEAR MODEL----# ####
ukgdp_model <- lm(gdpPercap ~ year, data = gapminder_uk)
print(ukgdp_model)
summary(ukgdp_model)
install.packages("modelr")
#----MODEL PREDICTIONS----# ####
library(modelr)
gapminder_uk %>%
add_predictions(ukgdp_model) %>%
ggplot(aes(x=year, y=pred)) + geom_line() +
geom_point(aes(y=gdpPercap))
#----MODEL CHECKING - PLOTTING RESIDUALS----# ####
gapminder_uk %>%
add_residuals(ukgdp_model) %>%
ggplot(aes(x = year, y = resid)) + geom_point()
